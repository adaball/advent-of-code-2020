1606843384015:(pprint 'foo)
1606843971875:(ns advent.one)
1606843978760:(foobar "adam")
1607099420095:(get-input)
1607100344020:(solve-one)
1607100421779:(get-input)
1607100438789:(map prn (get-input))
1607100445921:(solve-one)
1607100619139:(filter (fn [x] (not (nil? x))) (solve-one))
1607100657176:(int "2020")
1607100671081:(clojure.repl/doc int)
1607100692389:(Integer/parseInt "2020)\n)\n"\n                  )
1607100699751:(Integer/parseInt "2020")
1607100819467:(get-input)
1607100851754:(solve-one)
1607100972830:(filter #(not (nil? %)) (solve-one))
1607101030990:(solve-one)
1607101632603:(clojure.repl/doc set)
1607101640092:(set (list 1 1 1 2 2 2 3 3  4 4 4 ))
1607101657260:(nth (set (list 1 1 1 2 2 2 3 3  4 4 4 )) 2)
1607101686644:(nth (vec (set (list 1 1 1 2 2 2 3 3  4 4 4 ))) 2)
1607101692561:(vec (set (list 1 1 1 2 2 2 3 3  4 4 4 )))
1607101946250:(set (list (list 1 2 3) (list 3 2 1)))
1607101962991:(set (list (list 1 2 3) (list 3 2 1) (list 3 2 1)\n           )))
1607101977749:(set (list (list 1 2 3) (list 3 2 1) (list 3 2 1)))
1607106774849:(assoc #{(list 1 2 3)} (list 1 2 3))
1607106802500:(clojure.repl/doc assoc)
1607106825045:(conj #{(list 1 2 3)} (list 1 2 3))
1607106839602:#{(list 1 2 3)}
1607106851803:(conj (list 1 2 3) #{(list 1 2 3)})
1607106875220:(clojure.repl/doc into)
1607106894773:(into #{set 1 2})
1607106904200:(into #{set 1 2} 1\n      )
1607106917138:(into #{set 1 2} (list 1 2 3))
1607106925035:(clojure.repl/doc into)
1607106949605:(clojure.repl/doc set\n                  )
1607106973771:(require '[clojure.repl :refer [doc]])
1607106977348:(doc set)
1607107091221:(conj #{(list 1 2 3)} (list 1 2 3))
1607107098983:(conj #{(list 1 2 3)} (list 1 2 3) (list 3 4 5)\n      )
1607107691501:(doc cond)
1607107830191:(get-next 'a 2)
1607107833253:(get-next 'd\n          2)
1607107843713:(get-next 'c 2)
1607107988128:(>= 2 1)
1607108015330:(nth [0 1 2 3] 3)
1607108018773:(nth [0 1 2 3] 4\n     )
1607108032409:(count [0 1 2 3])
1607109034361:(let [input (get-input)\n      n     (get-next (count input) 'a 0 1 2)]\n  n)
1607109073219:(let [input (get-input)\n      n     (get-next (count input) 'a 0 1 2)\n      o     (get-next (count input) 'b 0 1 2)\n      p     (get-next (count input) 'c 0 1 2)]\n  (list n o p))
1607109137614:(doc loop)
1607109300920:(solve-two\n )
1607109407414:(solve-two)
1607109943456:(require '[clojure.repl :refer [doc])
1607109949823:(require '[clojure.repl :refer [doc]])
1607109958938:(doc nth)
1607110065249:(nth '(1 2 3) nil)
1607110257623:(solve-two)
1607110271057:(ns advent.one)
1607110273171:(solve-two)
